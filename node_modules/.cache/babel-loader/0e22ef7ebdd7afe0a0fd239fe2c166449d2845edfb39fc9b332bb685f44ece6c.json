{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tommy\\\\source\\\\repos\\\\Shutters-Fabric-1\\\\src\\\\pages\\\\Logins\\\\ResetPasswordForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useNavigate } from \"react-router-dom\";\n// import \"../../style.css\";\n// import \"../../styleCustom.css\";\nimport \"../../Components/SelectComponent\";\nimport TextBoxComponent from \"../../Components/TextBoxComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPasswordForm = _ref => {\n  _s();\n  let {\n    formInfo,\n    formState\n  } = _ref;\n  const [showError, setShowError] = useState(false);\n  const formValues = {\n    user_email: '',\n    user_password: ''\n  };\n  const showHideError = show => {\n    setShowError(show);\n  };\n  const setFormInfo = val => {\n    formState({\n      ...formInfo,\n      company_id: val\n    });\n  };\n  const navigate = useNavigate();\n  const navigateToLoginForm = () => {\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-login-position\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), showError && /*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        color: 'red'\n      },\n      children: \"Email was not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 45\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n        // validationCode: \"\",\n      },\n\n      validationSchema: Yup.object({\n        email: Yup.string().email(\"Invalid email addresss`\").required(\"Email is required\"),\n        password: Yup.string().required(\"User Id is required\"),\n        password: Yup.string().min(8, 'Password must be 8 characters long').matches(/[0-9]/, 'Password requires a number').matches(/[a-z]/, 'Password requires a lowercase letter').matches(/[A-Z]/, 'Password requires an uppercase letter').matches(/[^\\w]/, 'Password requires a symbol').required(\"New Password is required\"),\n        confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Must match \"password\" field value').required(\"Confirm Password is required\")\n        // validationCode: Yup.number()    \n        //     .required(\"Validation Code number is required\")\n        //     .min(10, \"Must be 4 number\")\n        //     .max(10, \"Must be 4 number\"),    \n      }),\n\n      onSubmit: async (values, _ref2) => {\n        let {\n          setSubmitting\n        } = _ref2;\n        await new Promise(r => setTimeout(r, 10));\n        setSubmitting(false);\n        formValues.user_email = values.email;\n        formValues.user_password = values.password;\n        const requestOptions = {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(formValues)\n        };\n        const resUser = await fetch('http://127.0.0.1:8000/user', requestOptions);\n        const data = await resUser.json();\n        if (data !== undefined) {\n          if (resUser.statusText === \"Not Found\") {\n            showHideError(true);\n          } else {\n            showHideError(false);\n            const data = await fetch('http://127.0.0.1:8000/user_email/' + values.email);\n            const user = await data.json();\n            if (user !== undefined) {\n              setFormInfo(user.company_id);\n              navigateToLoginForm();\n            }\n          }\n        }\n        console.log(values);\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(TextBoxComponent, {\n          label: \"Email Address\",\n          name: \"email\",\n          type: \"email\",\n          placeholder: \"jane@formik.com\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextBoxComponent, {\n          label: \"New Password\",\n          name: \"password\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextBoxComponent, {\n          label: \"Confirm New Password\",\n          name: \"confirmPassword\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPasswordForm, \"uWrSD2VjT9bJYhZPbpOoLNpb0uc=\", false, function () {\n  return [useNavigate];\n});\n_c = ResetPasswordForm;\nexport default ResetPasswordForm;\nvar _c;\n$RefreshReg$(_c, \"ResetPasswordForm\");","map":{"version":3,"names":["React","useState","Formik","Form","Yup","useNavigate","TextBoxComponent","jsxDEV","_jsxDEV","ResetPasswordForm","_ref","_s","formInfo","formState","showError","setShowError","formValues","user_email","user_password","showHideError","show","setFormInfo","val","company_id","navigate","navigateToLoginForm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","initialValues","email","password","confirmPassword","validationSchema","object","string","required","min","matches","oneOf","ref","onSubmit","values","_ref2","setSubmitting","Promise","r","setTimeout","requestOptions","method","headers","body","JSON","stringify","resUser","fetch","data","json","undefined","statusText","user","console","log","label","name","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/tommy/source/repos/Shutters-Fabric-1/src/pages/Logins/ResetPasswordForm.js"],"sourcesContent":["import React, { useState} from 'react';\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// import \"../../style.css\";\r\n// import \"../../styleCustom.css\";\r\nimport \"../../Components/SelectComponent\";\r\nimport TextBoxComponent from \"../../Components/TextBoxComponent\";\r\n\r\nconst ResetPasswordForm = ({formInfo, formState}) => {  \r\n  const[showError, setShowError] = useState(false)\r\n\r\n  const formValues = {\r\n    user_email: '',\r\n    user_password: ''\r\n  }\r\n\r\n  const showHideError = ((show) => {\r\n    setShowError(show)\r\n  })\r\n\r\n  const setFormInfo = ((val) => {\r\n    formState({...formInfo, company_id: val})\r\n  })\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const navigateToLoginForm = () => {\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-login-position\">\r\n      <h1>Reset Password</h1>{ showError && <h4 style={{color: 'red'}}>Email was not found</h4> }\r\n      <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        // validationCode: \"\",\r\n      }}\r\n        validationSchema={Yup.object({\r\n            email: Yup.string()\r\n              .email(\"Invalid email addresss`\")\r\n              .required(\"Email is required\"),\r\n            password: Yup\r\n              .string()\r\n              .required(\"User Id is required\"),\r\n            password: Yup\r\n              .string()\r\n              .min(8, 'Password must be 8 characters long')\r\n              .matches(/[0-9]/, 'Password requires a number')\r\n              .matches(/[a-z]/, 'Password requires a lowercase letter')\r\n              .matches(/[A-Z]/, 'Password requires an uppercase letter')\r\n              .matches(/[^\\w]/, 'Password requires a symbol')\r\n              .required(\"New Password is required\"),\r\n          confirmPassword: Yup\r\n            .string()\r\n            .oneOf([Yup.ref('password'), null], 'Must match \"password\" field value')\r\n            .required(\"Confirm Password is required\"),\r\n        // validationCode: Yup.number()    \r\n        //     .required(\"Validation Code number is required\")\r\n        //     .min(10, \"Must be 4 number\")\r\n        //     .max(10, \"Must be 4 number\"),    \r\n        })}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          await new Promise(r => setTimeout(r, 10));\r\n          setSubmitting(false);\r\n          formValues.user_email = values.email;\r\n          formValues.user_password = values.password;\r\n          const requestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formValues)\r\n          }\r\n          const resUser = await fetch('http://127.0.0.1:8000/user', requestOptions)\r\n          const data = await resUser.json()\r\n          if(data !== undefined) {\r\n            if(resUser.statusText === \"Not Found\"){\r\n                showHideError(true)\r\n            }\r\n            else{\r\n                showHideError(false)\r\n                const data = await fetch('http://127.0.0.1:8000/user_email/' + values.email)\r\n                const user = await data.json()\r\n                if(user !== undefined) {\r\n                  setFormInfo(user.company_id)\r\n                  navigateToLoginForm()\r\n                }\r\n            }\r\n          }\r\n          console.log(values)\r\n        }}\r\n      >\r\n        <Form>\r\n          <TextBoxComponent label=\"Email Address\" name=\"email\" type=\"email\" placeholder=\"jane@formik.com\" />  \r\n          <br></br>\r\n          <TextBoxComponent label=\"New Password\" name=\"password\" type=\"password\"  />\r\n          <br></br>\r\n          <TextBoxComponent label=\"Confirm New Password\" name=\"confirmPassword\" type=\"password\" />\r\n          {/* <TextBoxComponent label=\"Validation Code\" name=\"validationCode\" type=\"number\" /> */}\r\n          <br/>\r\n          <button type=\"submit\">Reset Password</button>\r\n        </Form>\r\n        \r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordForm\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
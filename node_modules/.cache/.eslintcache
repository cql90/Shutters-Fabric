[{"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\index.js":"1","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\App.js":"2","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\Navigation.js":"3","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Main.js":"4","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\Contact.js":"5","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\About.js":"6","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\SignupForm.js":"7","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\LoginForm.js":"8","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\ResetPasswordForm.js":"9","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\ValidationCode.js":"10","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\CustomerInfoForm.js":"11","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\NewOrRetrieveCustomerForm.js":"12","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\CustomerInvoiceForm.js":"13","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\RadioButtonComponentExt.js":"14","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TextBoxComponentExt.js":"15","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\SelectComponentExt.js":"16","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\ShowHideDividerSplit.js":"17","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\SelectComponent.js":"18","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TextBoxComponent.js":"19","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\CheckboxComponent.js":"20","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\ShowHideInsideOutsideFrame.js":"21","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TableCustomerInvoice.js":"22","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TableComponent.js":"23","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\DeleteItemStateObject.js":"24","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\SwapArrayUp.js":"25","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TextError.js":"26","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\SwapArrayDown.js":"27"},{"size":360,"mtime":1683939221747,"results":"28","hashOfConfig":"29"},{"size":275,"mtime":1683939221738,"results":"30","hashOfConfig":"29"},{"size":3291,"mtime":1683939221750,"results":"31","hashOfConfig":"29"},{"size":30320,"mtime":1683939221753,"results":"32","hashOfConfig":"29"},{"size":164,"mtime":1683939221749,"results":"33","hashOfConfig":"29"},{"size":159,"mtime":1683939221748,"results":"34","hashOfConfig":"29"},{"size":6073,"mtime":1683939221752,"results":"35","hashOfConfig":"29"},{"size":3235,"mtime":1683939221750,"results":"36","hashOfConfig":"29"},{"size":3992,"mtime":1683939221752,"results":"37","hashOfConfig":"29"},{"size":1109,"mtime":1683939221752,"results":"38","hashOfConfig":"29"},{"size":7111,"mtime":1683939221749,"results":"39","hashOfConfig":"29"},{"size":4666,"mtime":1683939221751,"results":"40","hashOfConfig":"29"},{"size":3192,"mtime":1683939221750,"results":"41","hashOfConfig":"29"},{"size":2456,"mtime":1683939221740,"results":"42","hashOfConfig":"29"},{"size":834,"mtime":1683939221743,"results":"43","hashOfConfig":"29"},{"size":1012,"mtime":1683939221741,"results":"44","hashOfConfig":"29"},{"size":179,"mtime":1683939221765,"results":"45","hashOfConfig":"29"},{"size":1205,"mtime":1683939221741,"results":"46","hashOfConfig":"29"},{"size":688,"mtime":1683939221743,"results":"47","hashOfConfig":"29"},{"size":527,"mtime":1683939221739,"results":"48","hashOfConfig":"29"},{"size":354,"mtime":1683939221765,"results":"49","hashOfConfig":"29"},{"size":2000,"mtime":1683939221742,"results":"50","hashOfConfig":"29"},{"size":3188,"mtime":1683939221742,"results":"51","hashOfConfig":"29"},{"size":603,"mtime":1683939221763,"results":"52","hashOfConfig":"29"},{"size":329,"mtime":1683939221766,"results":"53","hashOfConfig":"29"},{"size":170,"mtime":1683939221744,"results":"54","hashOfConfig":"29"},{"size":331,"mtime":1683939221765,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hd60qw",{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":3,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\index.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\App.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\Navigation.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Main.js",["148","149","150","151","152","153","154","155","156","157","158","159","160"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport \"../style.css\";\r\nimport \"../styleCustom.css\";\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nimport dataMainForm from \"../data/dataMainForm.json\";\r\nimport TextBoxComponentExt from '../Components/TextBoxComponentExt';\r\nimport RadioButtonComponentExt from '../Components/RadioButtonComponentExt';\r\nimport SelectComponentExt from '../Components/SelectComponentExt';\r\nimport TableDetailMain from '../Components/TableComponent';\r\nimport { showInsideOutsideFrame } from '../utilities/ShowHideInsideOutsideFrame'\r\nimport { showHideDividerSplit } from '../utilities/ShowHideDividerSplit'\r\n\r\nconst dataMain = JSON.parse(JSON.stringify(dataMainForm))\r\nconst fieldNumberOnly =  (/^(([0-9.]?)*)+$/)\r\n\r\nconst MainComponent = ({formInfo, formState}) => {\r\n    const [showInsideFrame, setShowInsideFrame] = useState(true)\r\n    const [showOutsideFrame, setShowOutsideFrame] = useState(false)\r\n    const [showDividerSplit, setShowDividerSplit] = useState(false)\r\n    const [showHideTable, setShowHideTable] = useState(false)\r\n    const [dataForTables, setDataForTables] = useState([])\r\n    const [dataOrders, setDataForOrders] = useState([])\r\n\r\n    const[width, setWidth] = useState('')\r\n    const[length, setLength] = useState('')\r\n    const[finishWidth, setFinishWidth] = useState('')\r\n    const[finishLength, setFinisLength] = useState('')\r\n    const[sillWidth, setSillWidth] = useState('')\r\n    const[measurement, setMeasurement] = useState('')\r\n    const[instruction, setInstruction] = useState('')\r\n    const[hingeChoice, sethingeChoice] = useState('')\r\n    const[mount, setMount] = useState('')\r\n    const[louver, setLouver] = useState('')\r\n    const[panel, setPanel] = useState('')\r\n    const[insideFrame, setInsideFrame] = useState('')\r\n    const[outsideFrame, setOutsideFrame] = useState('')\r\n    const[color, setColor] = useState('')\r\n    const[rail, setRail] = useState('')\r\n    const[dividerSplitOption, setDividerSplitOption] = useState('')\r\n    const[dividerSplitSize, setDividerSplitSize] = useState('')\r\n    const[choice, setChoice] = useState('')\r\n    const[frame, setFrame] = useState('')\r\n    const[numOfFrame, setNumOfFrame] = useState('')\r\n    const[disable, setDisable] = useState(true)\r\n    const[disableInvoiceField, setDisableInvoiceField] = useState(false)\r\n\r\n    const[customerId, setCustomerId] = useState('')\r\n    const[customerFirstName, setCustomerFirstName] = useState('')\r\n    const[customerLastName, setCustomerLastName] = useState('')\r\n    const[customerName, setCustomerName] = useState('')\r\n    const[saleManId, setSaleManId] = useState('')\r\n    const[saleManName, setSaleManName] = useState('')\r\n    const[companyId, setCompanyId] = useState('')\r\n    const[invoiceId, setInvoiceId] = useState('')\r\n    const[showError, setShowError] = useState(false)\r\n    const[newInvoice, setNewInvoice] = useState(false)\r\n\r\n   \r\n    // update single field in the array of object\r\n    const updateInvoiceValue = ((newValue) => {\r\n        const newDataOrders = dataOrders.map(dataOrder => {\r\n            // Return new dataOrder\r\n            return {\r\n                ...dataOrder,\r\n                invoice_id: newValue\r\n            };\r\n        });\r\n          // updated old array with the new array\r\n          setDataForOrders(newDataOrders);\r\n    })\r\n    // only allow number and one dot\r\n    const handleNumberAndDotOnly = ((e) => {\r\n        e.currentTarget.value = e.currentTarget.value.replace(/[^\\d\\.]/g, \"\") .replace(/\\./, \"x\") .replace(/\\./g, \"\") .replace(/x/, \".\");\r\n    })\r\n\r\n    const handleInvoiceChange = ((e) => {\r\n        if(invoiceId !== '' && sessionStorage.getItem('invoice') === 'reuse'){\r\n            e.currentTarget.value = invoiceId\r\n            return\r\n        }\r\n        setInvoiceId(e.currentTarget.value)\r\n        sessionStorage.setItem('invoice_id', e.currentTarget.value)\r\n        updateInvoiceValue(e.currentTarget.value)\r\n    })\r\n\r\n    const handleWidthChange = ((e) => {\r\n        setWidth(e.currentTarget.value)\r\n        handleNumberAndDotOnly(e)\r\n    })\r\n\r\n    const handleLengthChange = ((e) => {\r\n        setLength(e.currentTarget.value)\r\n        handleNumberAndDotOnly(e)\r\n    })\r\n\r\n    const handleFinishWidthChange = ((e) => {\r\n        setFinishWidth(e.currentTarget.value)\r\n        handleNumberAndDotOnly(e)\r\n    })\r\n\r\n    const handleFinishLengthChange = ((e) => {\r\n        setFinisLength(e.currentTarget.value)\r\n        handleNumberAndDotOnly(e)\r\n    })\r\n\r\n    const handleSillWidthChange = ((e) => {\r\n        setSillWidth(e.currentTarget.value)\r\n        handleNumberAndDotOnly(e)\r\n    })\r\n\r\n    const handleMeasurementChange = ((e) => {\r\n        setMeasurement(e.currentTarget.value)\r\n    })\r\n\r\n    const handleInstructionChange = ((e) => {\r\n        setInstruction(e.currentTarget.value)\r\n    })\r\n\r\n    const handlehingeChoiceChange = ((e) => {\r\n        sethingeChoice(e.currentTarget.value)\r\n    })\r\n\r\n    const handleMountChange = ((e) => {\r\n        setMount(e.currentTarget.value)\r\n        showInsideOutsideFrame(e.currentTarget.value, setShowInsideFrame, setShowOutsideFrame)\r\n    })\r\n\r\n    const handleLouverChange = ((e) => {\r\n        setLouver(e.currentTarget.value)\r\n    })\r\n\r\n    const handlePanelChange = ((e) => {\r\n        setPanel(e.currentTarget.value)\r\n    })\r\n\r\n    const handleInsideFrameChange = ((e) => {\r\n        setInsideFrame(e.currentTarget.value)\r\n    })\r\n\r\n    const handleOutsideFrameChange = ((e) => {\r\n        setOutsideFrame(e.currentTarget.value)\r\n    })\r\n\r\n    const handleColorChange = ((e) => {\r\n        setColor(e.currentTarget.value)\r\n    })\r\n\r\n    const handleRailChange = ((e) => {\r\n        setRail(e.currentTarget.value)\r\n    })\r\n\r\n    const handleDividerSplitOptionChange = ((e) => {\r\n        setDividerSplitOption(e.currentTarget.value)\r\n        showHideDividerSplit(e.currentTarget.value, setShowDividerSplit)\r\n    })\r\n\r\n    const handleDividerSplitSizeChange = ((e) => {\r\n        setDividerSplitSize(e.currentTarget.value)\r\n    })\r\n\r\n    const handleChoiceChange = ((e) => {\r\n        setChoice(e.currentTarget.value)\r\n    })\r\n\r\n    const handleFrameChange = ((e) => {\r\n        setFrame(e.currentTarget.value)\r\n    })\r\n\r\n    const handleNumOfFrameChange = ((e) => {\r\n        setNumOfFrame(e.currentTarget.value)\r\n    })\r\n\r\n    const setFormInfoSaleManId = (() => {\r\n        setSaleManId(sessionStorage.getItem('sale_man_id'))\r\n    })\r\n\r\n    const setFormInfoSaleManName = (() => {\r\n        setSaleManName(sessionStorage.getItem('sale_man_name'))\r\n    })\r\n    \r\n      const setFormInfoCustomerId = (() => {\r\n        setCustomerId(sessionStorage.getItem('customer_id'))\r\n    })\r\n    \r\n    const setFormInfoCustomerFirstName = (() => {\r\n        setCustomerFirstName(sessionStorage.getItem('customer_first_name'))\r\n    })\r\n\r\n    const setFormInfoCustomerLastName = (() => {\r\n        setCustomerLastName(sessionStorage.getItem('customer_last_name'))\r\n    })\r\n\r\n    const setFormInfoCustomerName = (() => {\r\n        setCustomerName(sessionStorage.getItem('customer_first_name') + ' ' + sessionStorage.getItem('customer_last_name'))\r\n    })\r\n\r\n    const setFormInfoInvoiceId = (() => {\r\n        setInvoiceId(sessionStorage.getItem('invoice_id'))\r\n    })\r\n\r\n    const setFormInfoCompanyId = (() => {\r\n        setCompanyId(sessionStorage.getItem('company_id'))\r\n    })\r\n\r\n    const initializeFields = (() => {\r\n        // if use existing invoice, disable invoice field and populate invoice # for invoice field\r\n        let checkInvoice = ''\r\n        const customerInvoiceRecord = JSON.parse(sessionStorage.getItem('single_customer_invoice'))\r\n        if(customerInvoiceRecord !== null && customerInvoiceRecord !== undefined) {\r\n            checkInvoice = sessionStorage.getItem('invoice')\r\n            if(checkInvoice === 'reuse'){\r\n                setInvoiceId(customerInvoiceRecord.invoice_id)\r\n            }\r\n            setCustomerFirstName(customerInvoiceRecord.customer_first_name)\r\n            setCustomerLastName(customerInvoiceRecord.customer_last_name)\r\n            setCustomerName(customerInvoiceRecord.customer_first_name + ' ' + customerInvoiceRecord.customer_last_name)\r\n            setCustomerId(customerInvoiceRecord.customer_id)\r\n            setSaleManName(customerInvoiceRecord.sale_man_name)\r\n            setSaleManId(customerInvoiceRecord.sale_man_id)\r\n            setCompanyId(customerInvoiceRecord.company_id)\r\n        }\r\n    })\r\n    \r\n    useEffect(() => {\r\n        setFormInfoSaleManId()\r\n        setFormInfoSaleManName()\r\n        setFormInfoCustomerId()\r\n        setFormInfoCustomerFirstName()\r\n        setFormInfoCustomerLastName()\r\n        setFormInfoCustomerName()\r\n        setFormInfoCompanyId()\r\n        setFormInfoInvoiceId()\r\n        initializeFields()\r\n    }, [])\r\n\r\n    const initialValues = {\r\n        dividerSplitSize: \"\"\r\n    };\r\n\r\n    const showHideError = ((show) => {\r\n      setShowError(show)\r\n    })\r\n    \r\n    const InvoiceInfoCheck = {\r\n        invoice_id: \"\",\r\n        company_id: \"\"\r\n    }\r\n\r\n    const InvoiceInfo = {\r\n        invoice_id: \"\",\r\n        company_id: \"\",\r\n        customer_id: \"\",\r\n        sale_man_id: \"\"\r\n    }\r\n\r\n    const setInvoiceInfo = (() => {\r\n        InvoiceInfo.invoice_id = invoiceId\r\n        InvoiceInfo.company_id = companyId\r\n        InvoiceInfo.customer_id = customerId\r\n        InvoiceInfo.sale_man_id = saleManId\r\n        return InvoiceInfo\r\n    })\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors }\r\n    } = useForm({\r\n        defaultValues: {\r\n            dividerSplitSize: initialValues.dividerSplitSize,\r\n        }\r\n    });\r\n\r\n    const checkInvoiceExisted = async () => {\r\n        InvoiceInfoCheck.invoice_id = sessionStorage.getItem(\"invoice_id\")\r\n        InvoiceInfoCheck.company_id = sessionStorage.getItem(\"company_id\")\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(InvoiceInfoCheck)\r\n        }\r\n        const data = await fetch('http://127.0.0.1:8000/invoice_existed', requestOptions)\r\n        const res = await data.json()\r\n        return res\r\n    }  \r\n\r\n    const calculate = (async () => {\r\n        // check if invoice already existed if it is new\r\n        if(sessionStorage.getItem('invoice') === 'new'){\r\n            const resCheck = await checkInvoiceExisted()\r\n            // if resOrder.detail is valid, it means the invoice_id already in database\r\n            if(resCheck !== undefined && resCheck.detail) {\r\n                setShowError(true)\r\n                return\r\n            }\r\n        }\r\n\r\n        setShowError(false)\r\n        let index = dataForTables.length\r\n        const dataTable = {\r\n            id: index,\r\n            width: width,\r\n            length: length,\r\n            hingeChoice: hingeChoice,\r\n            panel: panel,\r\n            outsideFrame: outsideFrame,\r\n            insideFrame: insideFrame,\r\n            numOfFrame: numOfFrame\r\n        }\r\n\r\n        const dataOrder = {\r\n            id: index,\r\n            invoice_id: invoiceId,\r\n            sale_man_id: saleManId,\r\n            customer_id: customerId,\r\n            width: width,\r\n            length: length,\r\n            finishWidth: finishWidth,\r\n            finishLength: finishLength,\r\n            sillWidth: sillWidth,\r\n            measurement: measurement,\r\n            instruction: instruction,\r\n            hingeChoice: hingeChoice,\r\n            mount: mount,\r\n            louver: louver,\r\n            panel: panel,\r\n            outsideFrame: outsideFrame,\r\n            insideFrame: insideFrame,\r\n            color: color,\r\n            rail: rail,\r\n            dividerSplitOption: dividerSplitOption,\r\n            dividerSplitSize: dividerSplitSize,\r\n            choice: choice,\r\n            frame: frame,\r\n            numOfFrame: numOfFrame\r\n        }\r\n        setDataForTables([...dataForTables, dataTable])\r\n        setDataForOrders([...dataOrders, dataOrder])\r\n        setShowHideTable(true)\r\n        setDisable(false)\r\n    })    \r\n\r\n    const sendOrders = async () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(dataOrders)\r\n        }\r\n        const data = await fetch('http://127.0.0.1:8000/order', requestOptions)\r\n        const resOrders = await data.json()\r\n        return resOrders\r\n    }\r\n\r\n    const createInvoice = async () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(setInvoiceInfo())\r\n        }\r\n        const data = await fetch('http://127.0.0.1:8000/invoice', requestOptions)\r\n        const resInvoice = await data.json()\r\n        return resInvoice\r\n    }\r\n\r\n    const onSubmit = async  (data, e) => {\r\n        if(e.nativeEvent.submitter.name == \"calculate\"){\r\n            calculate()\r\n            return\r\n        }\r\n        // save invoice to database\r\n        const resInvoice = createInvoice()\r\n        if(resInvoice !== undefined ){\r\n            setNewInvoice(true)\r\n            // Save new Order, send orders to server endpoint\r\n            setTimeout(() => {\r\n                const resOrders = sendOrders()\r\n                console.log(resOrders)\r\n            }, 500)\r\n            \r\n            console.log(resInvoice)\r\n        }\r\n        setDisableInvoiceField(true)\r\n    };  \r\n\r\n    return (  \r\n        <div className=\"app\">\r\n            <form onSubmit={handleSubmit(onSubmit)} > \r\n            {/* Customer Info */}\r\n            <div style={{display: 'inline-block'}}>\r\n                <div className=\"form-control\">\r\n                    <div className=\"form-main-position\">\r\n                        <fieldset type=\"customer\">\r\n                            <div className=\"div-horizontal-spacing\"></div>\r\n                            <div className=\"classdiv div-parent\" >\r\n                                <label className=\"label-main-small\">Invoice</label>\r\n                                <input id={dataMain[0][0].id} classdiv=\"div-textbox-main\" {...register(\"invoiceNumber\", { required: true })} name=\"invoiceNumber\" type=\"text-main\" disabled={disableInvoiceField} \r\n                                value={invoiceId} onChange={handleInvoiceChange}/>\r\n                            </div>\r\n                            <div className=\"div-horizontal-spacing\"></div>\r\n                            <TextBoxComponentExt id={dataMain[0][1].id} disabled classdiv=\"div-textbox-main\" classlabel=\"label-main\" label={dataMain[0][1].name} name={dataMain[0][1].value} type=\"text-main\" fieldvalue={customerName}/>\r\n                            <div className=\"div-horizontal-spacing\"></div>\r\n                            <TextBoxComponentExt id={dataMain[0][2].id} disabled classdiv=\"div-textbox-main\" classlabel=\"label-main\" label={dataMain[0][2].name} name={dataMain[0][2].value} type=\"text-main\" fieldvalue={saleManName}/>\r\n                        </fieldset>        \r\n                    </div>\r\n                </div>    \r\n                {/* controls need input from user */}\r\n                <div className=\"form-control\">\r\n                    <div className=\"form-main-position\">\r\n                    {/* Width */}    \r\n                        <div className=\"div-textbox-main\">\r\n                            <fieldset type=\"small\">  \r\n                            <legend type=\"small\">Width</legend>\r\n                                <div className=\"classdiv div-parent\" >\r\n                                    <label className=\"label-main-small\">Width</label>\r\n                                    <input type=\"text-main-small\" name=\"width\" {...register(\"width\", { required: true })} id={dataMain[2][0].id} classdiv=\"div-textbox-main\" classlabel=\"label-main-small\" \r\n                                    onChange={handleWidthChange}/>\r\n                                </div>\r\n                                <div className=\"div-vertical-spacing\"></div>\r\n                                <div className=\"classdiv div-parent\" >\r\n                                    <label className=\"label-main-small\">Length</label>\r\n                                    <input type=\"text-main-small\" name=\"length\" {...register(\"length\", { required: true })} id={dataMain[2][1].id} classdiv=\"div-textbox-main\" classlabel=\"label-main-small\"  \r\n                                    onChange={handleLengthChange}/>\r\n                                </div>\r\n                                <div className=\"div-vertical-spacing\"></div>\r\n                                <div className=\"classdiv div-parent\" >\r\n                                    <label className=\"label-main-small\">Finish Width</label>\r\n                                    <input type=\"text-main-small\" name=\"finishWidth\" id={dataMain[2][2].id} classdiv=\"div-textbox-main\" classlabel=\"label-main-small\"  \r\n                                    onChange={handleFinishWidthChange}/>\r\n                                </div>                    \r\n                                <div className=\"div-vertical-spacing\"></div><br></br><div className=\"div-vertical-spacing\"></div>\r\n                            </fieldset>\r\n                        </div>\r\n                    {/* Length */}    \r\n                        <div className=\"div-textbox-main\">\r\n                            <fieldset type=\"small\">  \r\n                            <legend type=\"small\">Length</legend>\r\n                                <div className=\"classdiv div-parent\" >\r\n                                    <label className=\"label-main-small\">Finish Length</label>\r\n                                    <input type=\"text-main-small\" name=\"finishLength\" id={dataMain[2][3].id} classdiv=\"div-textbox-main\" classlabel=\"label-main-small\"  \r\n                                    onChange={handleFinishLengthChange}/>\r\n                                </div>\r\n                                <div className=\"div-vertical-spacing\"></div>\r\n                                <div className=\"classdiv div-parent\" >\r\n                                    <label className=\"label-main-small\">Sill Width</label>\r\n                                    <input type=\"text-main-small\" name=\"sillWidth\" id={dataMain[2][3].id} classdiv=\"div-textbox-main\" classlabel=\"label-main-small\"  \r\n                                    onChange={handleSillWidthChange}/>\r\n                                </div>\r\n                                <div className=\"div-vertical-spacing\"></div>\r\n                                <TextBoxComponentExt style={{visibility: \"hidden\"}} classdiv=\"div-textbox-main\" classlabel=\"label-main-small\" label=\"\" name=\"dummy\" type=\"text-main-small\" />                    \r\n                                <div className=\"div-vertical-spacing\"></div><br></br><div className=\"div-vertical-spacing\"></div>\r\n                            </fieldset>\r\n                        </div>\r\n                    {/* Measurement Type */}\r\n                        <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"big\">Measurement Type</legend>\r\n                            <RadioButtonComponentExt name=\"measurement\" display=\"\" options={dataMain[1]} selectchange={handleMeasurementChange}/>\r\n                            <div className=\"div-vertical-spacing\"></div>\r\n                            <TextBoxComponentExt className=\"textBox-show\" classdiv=\"div-textbox-main\" classlabel=\"label-main-small\" label=\"\" name=\"dummy\" type=\"text-main-small\" />\r\n                            <div className=\"div-vertical-spacing\"></div>\r\n                            <br></br><br></br><br></br>\r\n                        </fieldset>\r\n                        </div>\r\n                {/* Instruction */}\r\n                    <div className=\"div-textbox-main\">\r\n                    <fieldset>  \r\n                    <legend type=\"medium\">instruction</legend>\r\n                        <textarea className=\"text-area\" classdiv=\"div-textbox-main\" classlabel=\"label-main-small\" label=\"\" \r\n                        name={dataMain[3][0].value} type=\"textarea\" row=\"4\" onChange={handleInstructionChange}/>\r\n                        <div className=\"div-vertical-spacing\"></div>\r\n                        {/* <TextBoxComponent className=\"textBox-show\" classdiv=\"div-textbox-main\" classlabel=\"label-main-small\" label=\"\" name=\"dummy\" type=\"text-main-small\" />                     */}\r\n                         <div className=\"div-vertical-spacing-2\"></div><div className=\"div-vertical-spacing-5\"></div> \r\n                    </fieldset>\r\n                    </div>\r\n                {/* Hings Choice */}\r\n                    <div className=\"div-textbox-main\" style={{'marginTop': 0}}>\r\n                    <fieldset>  \r\n                    <legend type=\"big\">Hings Choice</legend>\r\n                        <RadioButtonComponentExt name=\"hingeChoice\" display=\"\" options={dataMain[16]} selectchange={handlehingeChoiceChange} />\r\n                        <div className=\"div-vertical-spacing-3\"></div><div className=\"div-vertical-spacing\"></div>\r\n                    </fieldset>\r\n                    {/* <br></br> */}\r\n                    </div>\r\n                    <div className='div-spacing-between-rows' />    \r\n                    </div>\r\n                </div>    \r\n            </div>  \r\n            <div style={{display: 'inline-block'}}>\r\n                <div className=\"form-control\">\r\n                    <div className=\"form-main-position\">\r\n                    {/* Mount */}\r\n                        <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"small\" className=\"legend-margin-bottom\">Mount</legend>\r\n                            <RadioButtonComponentExt name=\"mount\" display=\"\" options={dataMain[4]} selectchange={handleMountChange} />\r\n                        </fieldset>\r\n                        </div>\r\n                    {/* Louver Size */}\r\n                        <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"big\">Louver Size</legend>\r\n                            <RadioButtonComponentExt name=\"louverSide\" display=\"\" options={dataMain[5]} selectchange={handleLouverChange} />\r\n                        </fieldset>\r\n                        </div>\r\n                    {/* Panel */}\r\n                        <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"small\" className=\"legend-margin-bottom\">Panel</legend>\r\n                            <RadioButtonComponentExt name=\"panel\" display=\"\" options={dataMain[6]} selectchange={handlePanelChange} />\r\n                        </fieldset>\r\n                        </div>\r\n                    {/* Outsider Frame Size */}\r\n                        { showOutsideFrame && <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"big\">Outside Frame Size</legend>\r\n                            <SelectComponentExt selectchange={handleOutsideFrameChange}  id=\"outSideFrameSide\" name=\"outSideFrameSide\" display=\"\" options={dataMain[7]} {...register(\"outSideFrameSide\", {\r\n                                required: \"Please select one item in the list\"})} style={{width: 260 }} />\r\n                            <div className=\"div-vertical-spacing\"></div><div className=\"div-vertical-spacing-4\"></div><div className=\"div-vertical-spacing-4\"></div>\r\n                        </fieldset>\r\n                        </div> }\r\n                    {/* Insider Frame Size */}\r\n                    { showInsideFrame && <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"big\">Insider Frame Size</legend>\r\n                            <SelectComponentExt style={{width: 260}} id=\"insideFrameSide\" name=\"insideFrameSide\" display=\"\" options={dataMain[8]} selectchange={handleInsideFrameChange} {...register(\"insideFrameSide\", {\r\n                                required: \"Please select one item in the list\"})} />\r\n                            <div className=\"div-vertical-spacing-4\"></div><div className=\"div-vertical-spacing-4\"></div>\r\n                        </fieldset>\r\n                        </div> }\r\n                        <div className='div-spacing-between-rows' />\r\n                        <br></br>\r\n                    </div>  \r\n                </div>\r\n            </div>\r\n            <div style={{display: 'inline-block'}}>\r\n                <div className=\"form-control\">\r\n                    <div className=\"form-main-position\">\r\n                    {/* Color */}\r\n                        <div className=\"div-textbox-main\" >\r\n                        <fieldset>  \r\n                        <legend type=\"small\" className=\"legend-margin-bottom\">Color</legend>\r\n                            <SelectComponentExt style={{width: 260}} name=\"color\" display=\"\" options={dataMain[9]} selectchange={handleColorChange} {...register(\"color\", {\r\n                                required: \"Please select one item in the list\"})} />\r\n                            <div className=\"div-vertical-spacing-3\"></div><div className=\"div-vertical-spacing-2\"></div>\r\n                        </fieldset>\r\n                        </div>\r\n                    {/* Rail Length */}\r\n                        <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"big\">Rail Length</legend>\r\n                            <RadioButtonComponentExt name=\"railLength\" display=\"\" options={dataMain[10]} selectchange={handleRailChange} />\r\n                            <div className=\"div-vertical-spacing\"></div>\r\n                            <div className=\"div-vertical-spacing-6\"></div>\r\n                        </fieldset>\r\n                        </div>\r\n                    {/* Divider Spit Option */}\r\n                        <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"max\">Divider/Split Option</legend>\r\n                            <RadioButtonComponentExt name=\"dividerSplitOption\" display=\"\" options={dataMain[11]} selectchange={handleDividerSplitOptionChange} />\r\n                            {/* <div className=\"div-vertical-spacing\"></div> */}\r\n                            <div className=\"div-vertical-spacing-9\"></div>\r\n                        </fieldset>\r\n                        </div>\r\n                    {/* Divider Spit Side */}\r\n                        {showDividerSplit && <div className=\"\" style={{display: 'inline-block', marginRight: 25}}>\r\n                        <fieldset>  \r\n                        <legend type=\"max\">Divider/Split Size</legend>\r\n                            <Form.Check type=\"radio\" name=\"dividerSplitSize\" value=\"50/50\" label=\"50/50\" {...register(\"dividerSplitSize\", {\r\n                                required: \"Please select your option\"})} onChange={handleDividerSplitSizeChange} /> \r\n                            <Form.Check type=\"radio\" name=\"dividerSplitSize\" value=\"30/70\" label=\"30/70\" {...register(\"dividerSplitSize\", {\r\n                                required: \"Please select your option\"})} onChange={handleDividerSplitSizeChange} />\r\n                            <div className=\"div-vertical-spacing\"></div>\r\n                            <div className=\"div-vertical-spacing-10\"></div>\r\n                        </fieldset>\r\n                        </div> }\r\n                    {/* Choice */}\r\n                        <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"small\" className=\"legend-margin-bottom\">Choice</legend>\r\n                            <RadioButtonComponentExt name=\"choice\" display=\"\" options={dataMain[13]} selectchange={handleChoiceChange} />\r\n                            <div className=\"div-vertical-spacing-0\"></div>\r\n                            <div className=\"div-vertical-spacing-6\"></div>\r\n                        </fieldset>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{display: 'inline-block'}}>\r\n                <div className=\"form-control\" style={{'marginTop': 6}}>\r\n                    <div className=\"form-main-position\">\r\n                    {/* Frame */}\r\n                        <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"small\" className=\"legend-margin-bottom\">Frame</legend>\r\n                            <RadioButtonComponentExt name=\"frame\" display=\"\" options={dataMain[14]} selectchange={handleFrameChange}/>\r\n                        </fieldset>\r\n                        </div>\r\n                    {/* Number of Frame */}\r\n                    <div className=\"div-textbox-main\">\r\n                        <fieldset>  \r\n                        <legend type=\"big\" >Num of Frame</legend>\r\n                            <RadioButtonComponentExt name=\"numOfFrame\" display=\"\" options={dataMain[15]} selectchange={handleNumOfFrameChange} />\r\n                            <div className=\"div-vertical-spacing-7\"></div>\r\n                        </fieldset>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br></br>\r\n            <div>\r\n                <div className=\"form-main-button-position\">\r\n                    <button type=\"submit\" name=\"calculate\" >Calculate</button>\r\n                </div>\r\n                <div className='form-main-button-position'>\r\n                    <button type=\"submit\" disabled={disable} >Save</button>\r\n                </div>   \r\n            </div>  \r\n            </form>\r\n            { showError && <div style={{marginLeft: 40}}><h4 style={{color: 'red'}}>Invoice already in database</h4></div> }\r\n            { showHideTable && <TableDetailMain options={dataForTables} setdatafortable={setDataForTables} optionorders={dataOrders} setdatafororder={setDataForOrders} showHideTable={setShowHideTable} setButtonDisable={setDisable} ></TableDetailMain> }\r\n            <br></br>\r\n            <br></br>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainComponent;","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\Contact.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\About.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\SignupForm.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\LoginForm.js",["161"],[],"\r\nimport React, { useState } from 'react';\r\nimport { Formik, Form } from \"formik\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport \"../../style.css\";\r\nimport \"../../styleCustom.css\";\r\nimport \"../../Components/SelectComponent\";\r\nimport TextBoxComponent from \"../../Components/TextBoxComponent\";\r\n\r\nconst LoginForm = ({formInfo, formState}) => {  \r\n  const navigate = useNavigate();\r\n\r\n  const navigateToRegisterForm = () => {\r\n    navigate('/register');\r\n  };\r\n\r\n  const navigateToResetPasswordForm = () => {\r\n    navigate('/resetPassword');\r\n  };\r\n\r\n  const navigateToCreateNewOrder = () => {\r\n    navigate('/order');\r\n  };\r\n\r\n  const[showError, setShowError] = useState(false)\r\n\r\n  const formValues = {\r\n    user_email: '',\r\n    user_password: ''\r\n  }\r\n\r\n  const showHideError = ((show) => {\r\n    setShowError(show)\r\n  })\r\n\r\n  const setFormInfoCompanyId = ((val, field) => {\r\n    formState({...formInfo, company_id: val})\r\n  })\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n    <div className=\"form-login-position\">\r\n      <h1>Login!</h1>{ showError && <h4 style={{color: 'red'}}>Invalid email or password</h4> }\r\n      <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n        validationSchema={Yup.object({\r\n            email: Yup.string()\r\n                .email(\"Invalid email addresss`\")\r\n                .required(\"Email is required\"),\r\n            password: Yup\r\n                .string()\r\n                .required(\"Password is required\"),  \r\n        })}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          await new Promise(r => setTimeout(r, 10));\r\n          setSubmitting(false);\r\n          formValues.user_email = values.email;\r\n          formValues.user_password = values.password;\r\n          const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formValues)\r\n          }\r\n          const resUser = await fetch('http://127.0.0.1:8000/user_email_password', requestOptions)\r\n          const data = await resUser.json()\r\n          if(data !== undefined) {\r\n            if(resUser.statusText === \"Not Found\"){\r\n                showHideError(true)\r\n            }\r\n            else{\r\n                showHideError(false)\r\n                setFormInfoCompanyId(data.company_id)\r\n                sessionStorage.setItem('company_id', data.company_id)\r\n                navigateToCreateNewOrder()\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        <Form>\r\n          <TextBoxComponent label=\"Email Address\" name=\"email\" type=\"email\" placeholder=\"jane@formik.com\" />  \r\n          <br></br>  \r\n          <TextBoxComponent label=\"Password\" name=\"password\" type=\"password\"  />\r\n          <div className=\"nav-right nav-menu\">\r\n            <a className=\"nav-item\" onClick={navigateToResetPasswordForm}>\r\n              forgot password?\r\n            </a>\r\n          </div>\r\n          <br/>\r\n          <button type=\"submit\">Login</button> \r\n          <button type=\"button\" onClick={navigateToRegisterForm}>Register New User</button> \r\n        </Form>\r\n        \r\n      </Formik>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm\r\n","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\ResetPasswordForm.js",["162"],[],"import React, { useState} from 'react';\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// import \"../../style.css\";\r\n// import \"../../styleCustom.css\";\r\nimport \"../../Components/SelectComponent\";\r\nimport TextBoxComponent from \"../../Components/TextBoxComponent\";\r\n\r\nconst ResetPasswordForm = ({formInfo, formState}) => {  \r\n  const[showError, setShowError] = useState(false)\r\n\r\n  const formValues = {\r\n    user_email: '',\r\n    user_password: ''\r\n  }\r\n\r\n  const showHideError = ((show) => {\r\n    setShowError(show)\r\n  })\r\n\r\n  const setFormInfo = ((val) => {\r\n    formState({...formInfo, company_id: val})\r\n  })\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const navigateToLoginForm = () => {\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-login-position\">\r\n      <h1>Reset Password</h1>{ showError && <h4 style={{color: 'red'}}>Email was not found</h4> }\r\n      <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        // validationCode: \"\",\r\n      }}\r\n        validationSchema={Yup.object({\r\n            email: Yup.string()\r\n              .email(\"Invalid email addresss`\")\r\n              .required(\"Email is required\"),\r\n            password: Yup\r\n              .string()\r\n              .required(\"User Id is required\"),\r\n            password: Yup\r\n              .string()\r\n              .min(8, 'Password must be 8 characters long')\r\n              .matches(/[0-9]/, 'Password requires a number')\r\n              .matches(/[a-z]/, 'Password requires a lowercase letter')\r\n              .matches(/[A-Z]/, 'Password requires an uppercase letter')\r\n              .matches(/[^\\w]/, 'Password requires a symbol')\r\n              .required(\"New Password is required\"),\r\n          confirmPassword: Yup\r\n            .string()\r\n            .oneOf([Yup.ref('password'), null], 'Must match \"password\" field value')\r\n            .required(\"Confirm Password is required\"),\r\n        // validationCode: Yup.number()    \r\n        //     .required(\"Validation Code number is required\")\r\n        //     .min(10, \"Must be 4 number\")\r\n        //     .max(10, \"Must be 4 number\"),    \r\n        })}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          await new Promise(r => setTimeout(r, 10));\r\n          setSubmitting(false);\r\n          formValues.user_email = values.email;\r\n          formValues.user_password = values.password;\r\n          const requestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formValues)\r\n          }\r\n          const resUser = await fetch('http://127.0.0.1:8000/user', requestOptions)\r\n          const data = await resUser.json()\r\n          if(data !== undefined) {\r\n            if(resUser.statusText === \"Not Found\"){\r\n                showHideError(true)\r\n            }\r\n            else{\r\n                showHideError(false)\r\n                const data = await fetch('http://127.0.0.1:8000/user_email/' + values.email)\r\n                const user = await data.json()\r\n                if(user !== undefined) {\r\n                  setFormInfo(user.company_id)\r\n                  navigateToLoginForm()\r\n                }\r\n            }\r\n          }\r\n          console.log(values)\r\n        }}\r\n      >\r\n        <Form>\r\n          <TextBoxComponent label=\"Email Address\" name=\"email\" type=\"email\" placeholder=\"jane@formik.com\" />  \r\n          <br></br>\r\n          <TextBoxComponent label=\"New Password\" name=\"password\" type=\"password\"  />\r\n          <br></br>\r\n          <TextBoxComponent label=\"Confirm New Password\" name=\"confirmPassword\" type=\"password\" />\r\n          {/* <TextBoxComponent label=\"Validation Code\" name=\"validationCode\" type=\"number\" /> */}\r\n          <br/>\r\n          <button type=\"submit\">Reset Password</button>\r\n        </Form>\r\n        \r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordForm\r\n","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\ValidationCode.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\CustomerInfoForm.js",["163","164"],[],"import React from 'react';\r\nimport { Formik, Form, useField, useFormikContext } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// import \"../../style.css\";\r\n// import \"../../styleCustom.css\";\r\nimport \"../../Components/SelectComponent\";\r\nimport SelectComponent from '../../Components/SelectComponent';\r\nimport state from \"../../data/dataState.json\";\r\nimport TextBoxComponent from \"../../Components/TextBoxComponent\";\r\n\r\nconst selectState = JSON.parse(JSON.stringify(state))\r\n// const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n\r\n// And now we can use these\r\nconst CustomerInfoForm = ({formInfo, formState}) => {  \r\n  const cusInfo = {\r\n    sale_man_id: \"\",\r\n    customer_first_name: \"\",\r\n    customer_last_name: \"\",\r\n    customer_phone: \"\",\r\n    customer_address: \"\", \r\n    customer_city: \"\",\r\n    customer_state: \"\",\r\n    customer_zip_code: \"\",\r\n    customer_country: \"USA\"\r\n  }\r\n\r\n  const saleManInfo = {\r\n    sale_man_name: \"\",\r\n    sale_man_phone: \"\",\r\n    company_id: \"\"\r\n  }\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const navigateToMain = () => {\r\n    navigate('/home');\r\n  };\r\n\r\n  const setFormInfoSaleManId = ((val) => {\r\n    formState({...formInfo, sale_man_id: val})\r\n  })\r\n\r\n  const setFormInfoSaleManName = ((val) => {\r\n    formState({...formInfo, sale_man_name: val})\r\n  })\r\n\r\n  const setFormInfoCustomerId = ((val) => {\r\n    formState({...formInfo, customer_id: val})\r\n  })\r\n\r\n  const setFormInfoCustomerFirstName = ((val) => {\r\n    formState({...formInfo, customer_first_name: val})\r\n  })\r\n\r\n  const setFormInfoCustomerLastName = ((val) => {\r\n    formState({...formInfo, customer_last_name: val})\r\n  })\r\n\r\n  return (\r\n    <div className=\"form-login-position\">\r\n      <h1>Customer Info!</h1>\r\n      <Formik\r\n      initialValues={{\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        streetName: \"\",\r\n        cityName: \"\",\r\n        state: \"\",\r\n        zipCode: \"\",\r\n        customerPhone: \"\",\r\n        saleName: \"\",\r\n        salePhone: \"\"\r\n      }}\r\n        validationSchema={Yup.object({\r\n          firstName: Yup.string()\r\n            .required(\"First Name is required\"),\r\n          lastName: Yup.string()\r\n            .required(\"Last Name is required\"),  \r\n          streetName: Yup.string()\r\n            .required(\"Street Name is required\"),\r\n          cityName: Yup.string()\r\n            .required(\"City is required\"),\r\n          state: Yup.string()\r\n            .required(\"State is required\"),  \r\n          zipCode: Yup.string()\r\n            .required(\"Zip Code is required\"),\r\n          customerPhone: Yup.string()\r\n            .required(\"Customer Phone number is required\")\r\n            .matches(phoneRegExp, 'Phone number is not valid')\r\n            .min(10, \"Must be 10 number\")\r\n            .max(10, \"Must be 10 number\"),\r\n          saleName: Yup.string()\r\n            .required(\"Sale Person Name is required\"),  \r\n          salePhone: Yup.string()\r\n            .required(\"Sale Person Phone is required\")\r\n            .matches(phoneRegExp, 'Phone number is not valid')\r\n            .min(10, \"Must be 10 number\")\r\n            .max(10, \"Must be 10 number\"),\r\n        })}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          await new Promise(r => setTimeout(r, 10));\r\n          setSubmitting(false);\r\n          saleManInfo.sale_man_name = values.saleName\r\n          saleManInfo.sale_man_phone = values.salePhone\r\n          if( formInfo.company_id === undefined){\r\n            formInfo.company_id = sessionStorage.getItem('company_id')\r\n            saleManInfo.company_id = formInfo.company_id\r\n          }\r\n          else\r\n            saleManInfo.company_id = formInfo.company_id\r\n          \r\n          const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(saleManInfo)\r\n          }\r\n          const data = await fetch('http://127.0.0.1:8000/sale_man', requestOptions)\r\n          const resSaleMan = await data.json()\r\n          if(resSaleMan !== undefined) {\r\n            setFormInfoSaleManId(resSaleMan.sale_man_id)\r\n            setFormInfoSaleManName(resSaleMan.sale_man_name)\r\n            sessionStorage.setItem('sale_man_id', resSaleMan.sale_man_id)\r\n            sessionStorage.setItem('sale_man_name', resSaleMan.sale_man_name)\r\n            cusInfo.customer_first_name = values.firstName\r\n            cusInfo.customer_last_name = values.lastName\r\n            cusInfo.customer_address = values.streetName\r\n            cusInfo.customer_city = values.cityName\r\n            cusInfo.customer_state = values.state\r\n            cusInfo.customer_zip_code = values.zipCode\r\n            cusInfo.customer_phone = values.customerPhone\r\n            cusInfo.sale_man_id = resSaleMan.sale_man_id\r\n            const requestOptions = {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify(cusInfo)\r\n            }\r\n            const data = await fetch('http://127.0.0.1:8000/customer', requestOptions)\r\n            const resCustomer = await data.json()\r\n            if(resCustomer !== undefined) {\r\n              setFormInfoCustomerId(resCustomer.customer_id)\r\n              setFormInfoCustomerFirstName(values.firstName)\r\n              setFormInfoCustomerLastName(values.lastName)\r\n              sessionStorage.setItem('customer_first_name', values.firstName)\r\n              sessionStorage.setItem('customer_last_name', values.lastName)\r\n              sessionStorage.setItem('customer_id', resCustomer.customer_id)\r\n              sessionStorage.setItem('sale_man_id', resCustomer.sale_man_id)\r\n              sessionStorage.setItem('invoice', 'new')\r\n              navigateToMain()\r\n            }\r\n          }\r\n          else{\r\n            console.log(\"Error: \" + resSaleMan)\r\n          }\r\n        }}\r\n      >\r\n        <Form>\r\n          <TextBoxComponent label=\"First Name\" name=\"firstName\" type=\"text\" placeholder=\"First Name\" />\r\n          <TextBoxComponent label=\"Last Name\" name=\"lastName\" type=\"text\" placeholder=\"Last Name\" />\r\n          <TextBoxComponent label=\"Street Name\" name=\"streetName\" type=\"text\" placeholder=\"555 Yolanda st.\" />\r\n          <TextBoxComponent label=\"City Name\" name=\"cityName\" type=\"text\" placeholder=\"Woodland Hills\" />\r\n          <SelectComponent label=\"State\" name=\"state\" type=\"select\" options={selectState} />\r\n          <TextBoxComponent label=\"Zip Code\" name=\"zipCode\" type=\"number\" />\r\n          <TextBoxComponent label=\"Customer Phone\" name=\"customerPhone\" type=\"text\" />\r\n          <TextBoxComponent label=\"Sale Person Name\" name=\"saleName\" type=\"text\" />\r\n          <TextBoxComponent label=\"Sale Person Phone\" name=\"salePhone\" type=\"text\" />\r\n          <br></br>\r\n          <button type=\"submit\">Submit</button>\r\n        </Form>\r\n        \r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerInfoForm\r\n","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\NewOrRetrieveCustomerForm.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\pages\\Logins\\CustomerInvoiceForm.js",["165","166","167"],[],"import React, { useState } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useForm } from 'react-hook-form';\r\nimport { Form } from \"react-bootstrap\";\r\nimport * as Yup from \"yup\";\r\nimport \"../../style.css\";\r\nimport \"../../styleCustom.css\";\r\nimport TableCustomerInvoice from '../../Components/TableCustomerInvoice';\r\n\r\n\r\n  // And now we can use these\r\nconst CustomerInvoiceForm = () => {  \r\n  const customerInvoice = JSON.parse(sessionStorage.getItem('customer_invoice'))\r\n\r\n  const[custInv, setCustInv] = useState('')\r\n  const[showRadioButtons, setShowRadioButtons] = useState(false)\r\n\r\n  const handleCustomerInvoiceChange = ((e) => {\r\n    sessionStorage.setItem('invoice', e.currentTarget.value)\r\n  })\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const navigateToOrder = () => {\r\n      navigate('/home');\r\n  };\r\n\r\n  const singleCustomerInvoice = JSON.parse(sessionStorage.getItem('single_customer_invoice'));\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({\r\n    defaultValues: {\r\n    }\r\n  });\r\n\r\n  const onSubmit = async  (data, e) => {\r\n    navigateToOrder()\r\n  };  \r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n    <div className=\"divCustomerInvoice\" id=\"divCustomerInvoice\">\r\n        <Form onSubmit={handleSubmit(onSubmit)} >\r\n          <TableCustomerInvoice options={customerInvoice} setcustinv={setCustInv} setshowradiobuttons={setShowRadioButtons} ></TableCustomerInvoice>\r\n          <br></br>\r\n          { showRadioButtons && <div className=\"div-textbox-main\" style={{marginLeft: '10px'}}>\r\n            <fieldset style={{paddingTop: '.8rem', height: '6rem', width: '520px'}}>  \r\n                <div className=\"div-parent\">                \r\n                <Form.Check type=\"radio\" style={{display: 'inline-block'}} name=\"customerinvoice\" value=\"reuse\" label=\"Reuse Invoice\" {...register(\"customerinvoice\", {\r\n                    required: \"Please select your option\"})} onChange={handleCustomerInvoiceChange} />\r\n                    <label id=\"reuse\">{singleCustomerInvoice.invoice_id}</label><label id=\"reusecustnameandphone\">\r\n                      &nbsp;&nbsp;for &nbsp;{singleCustomerInvoice.customer_first_name}&nbsp;&nbsp;{singleCustomerInvoice.customer_last_name}-&nbsp;&nbsp;{singleCustomerInvoice.customer_phone}</label> \r\n                </div>  \r\n                <div className=\"div-parent\">  \r\n                <Form.Check type=\"radio\" style={{display: 'inline-block'}} name=\"customerinvoice\" value=\"new\" label=\"Create new Invoice\" {...register(\"customerinvoice\", {\r\n                    required: \"Please select your option\"})} onChange={handleCustomerInvoiceChange} />\r\n                    <label id=\"newcustnameandphone\">&nbsp;&nbsp;for &nbsp;{singleCustomerInvoice.customer_first_name}&nbsp;&nbsp;{singleCustomerInvoice.customer_last_name}-&nbsp;&nbsp;{singleCustomerInvoice.customer_phone}</label> \r\n                </div>\r\n            </fieldset>\r\n            <div className=\"form-main-button-position\">\r\n                <button type=\"submit\" >Start Order</button>\r\n            </div>\r\n          </div> }\r\n        </Form>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerInvoiceForm\r\n","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\RadioButtonComponentExt.js",["168","169","170","171","172","173"],[],"import React from \"react\"\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport TextError  from \"./TextError\"\r\n\r\n// function getStyles(errors, fieldName) {\r\n//     if (getIn(errors, fieldName)) {\r\n//       return {\r\n//         // border: '1px solid red',\r\n//         color: 'red'\r\n//       }\r\n//     }\r\n// }\r\n\r\nconst RadioButtonComponentExt = (props) => {\r\n    const {name, options, selectchange, checkedoption} = props;\r\n    const x = options;\r\n    const initialValues = {\r\n        measurement: \"Standard\",\r\n        mount: \"IM\",\r\n        louverSide: \"3 1/2\",\r\n        railLength: \"4 1/2\",\r\n        splitSize: \"splitFiftyFifty\",\r\n        choice: \"Standard\",\r\n        frame: \"normal\",\r\n        numOfFrame: \"4\",\r\n        hingsChoice: checkedoption,\r\n        dividerSplitOption: \"None\",\r\n        dividerSplitSize: \"\",\r\n        customerinvoice: \"\"\r\n    };\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors }\r\n    } = useForm({\r\n            defaultValues: {\r\n                measurement: initialValues.measurement,\r\n                mount: initialValues.mount,\r\n                louverSide: initialValues.louverSide,\r\n                railLength: initialValues.railLength,\r\n                splitSize: initialValues.splitSize,\r\n                choice: initialValues.choice,\r\n                frame: initialValues.frame,\r\n                numOfFrame: initialValues.numOfFrame,\r\n                hingsChoice: initialValues.hingsChoice,\r\n                dividerSplitOption: initialValues.dividerSplitOption,\r\n                dividerSplitSize: initialValues.dividerSplitSize,\r\n                customerinvoice: initialValues.customerinvoice\r\n            }\r\n    });\r\n\r\n    const selectChange = (e) => {\r\n        selectchange(e)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {   \r\n                options.map((option, i) => {\r\n                    return (\r\n                        <div key={i} >\r\n                            <label>\r\n                            <input type=\"radio\" id={option.id} value={option.value} disabled={props.notallow} \r\n                            {...register(name)}  onChange={selectChange}/>\r\n                            {option.name}</label>                                \r\n                        </div>   \r\n                    ) \r\n                })                \r\n            }\r\n        </div>\r\n    );\r\n  };\r\n\r\n  export default RadioButtonComponentExt","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TextBoxComponentExt.js",["174","175"],[],"import React from \"react\"\r\nimport { useForm} from \"react-hook-form\"\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport \"../style.css\";\r\nimport \"../styleCustom.css\";\r\n\r\nconst TextBoxComponentExt = ({ inputName, label, fieldvalue, ...props }) => {\r\n  const {textchange} = props;\r\n\r\n  const textChange = (e) => {\r\n    textchange(e);\r\n  }\r\n\r\n  const {\r\n    register,\r\n    formState: { errors }\r\n  } = useForm();\r\n\r\n  return (\r\n    <>  \r\n      <div className={props.classdiv} style={{display: 'inline-block'}}>\r\n        <Form.Label className={props.classlabel}>{label}</Form.Label>\r\n        <input type=\"text\" name={inputName} className=\"text-input\" value={fieldvalue} {...props} onChange={textChange}/>\r\n        {errors.width && <p>{errors.width.message}</p>}\r\n      </div>  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextBoxComponentExt","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\SelectComponentExt.js",["176"],[],"import React, { forwardRef } from \"react\"\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst StyledSelect = styled.select`\r\n  color: var(--blue);\r\n`;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n  font-size: 12px;\r\n  color: var(--red-600);\r\n  width: 400px;\r\n  margin-top: 0.25rem;\r\n  &:before {\r\n    content: \"❌ \";\r\n    font-size: 10px;\r\n  }\r\n  @media (prefers-color-scheme: dark) {\r\n    color: var(--red-300);\r\n  }\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  margin-top: 0.2rem;\r\n`;\r\n\r\nconst SelectComponentExt = forwardRef((props, ref) => {\r\n  const {label, options, selectchange} = props;\r\n  const selectChange = (e) => {\r\n    selectchange(e)\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n      <StyledSelect {...props} onChange={selectChange} ref={ref}>\r\n        <option value=''>Select...</option>\r\n      {options.map((x, y) => <option value={x.value} key={y}>{x.name}</option>)}</StyledSelect>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default SelectComponentExt","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\ShowHideDividerSplit.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\SelectComponent.js",["177","178"],[],"import React from \"react\"\r\nimport styled from \"@emotion/styled\";\r\nimport { useField, Field, ErrorMessage } from \"formik\"\r\n\r\nconst StyledSelect = styled.select`\r\n  color: var(--blue);\r\n`;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n  font-size: 12px;\r\n  color: var(--red-600);\r\n  width: 400px;\r\n  margin-top: 0.25rem;\r\n  &:before {\r\n    content: \"❌ \";\r\n    font-size: 10px;\r\n  }\r\n  @media (prefers-color-scheme: dark) {\r\n    color: var(--red-300);\r\n  }\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  margin-top: 0.2rem;\r\n`;\r\n\r\nfunction setStyle(error) {\r\n  if (error) {\r\n    return { border: '1px solid red' }\r\n  }\r\n}\r\n\r\nconst SelectComponent = ({ label, options, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n      <StyledSelect style={meta.error && meta.touched? setStyle(meta.error, props.name): null} {...field} {...props} >\r\n      {options.map((x, y) => <option value={x.value} key={y}>{x.name}</option>)}</StyledSelect>\r\n      {meta.touched && meta.error ? (\r\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectComponent\r\n","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TextBoxComponent.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\CheckboxComponent.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\ShowHideInsideOutsideFrame.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TableCustomerInvoice.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TableComponent.js",["179","180","181"],[],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { swapArrayDown } from '../utilities/SwapArrayDown';\r\nimport { swapArrayUp } from '../utilities/SwapArrayUp';\r\nimport { deleteItemStateObject, deleteOrderStateObject } from '../utilities/DeleteItemStateObject';\r\n\r\n  const TableDetailMain = (props) => {\r\n    const { options, setdatafortable, optionorders, setdatafororder, showHideTable, setButtonDisable } = props;\r\n    \r\n    const onChange = (e, index) => {\r\n      if(e.currentTarget.id === \"up\")\r\n        swapArrayUp(index, options, setdatafortable)\r\n      else if(e.currentTarget.id === \"down\")\r\n        swapArrayDown(index, options, setdatafortable)\r\n      else{\r\n        deleteItemStateObject(index, options, setdatafortable, ShowHideTable, DisableSaveButton)     \r\n        deleteOrderStateObject(index, optionorders, setdatafororder)   \r\n      }\r\n    }\r\n\r\n    const ShowHideTable = ((objs) => {\r\n      if(objs.length <= 0)\r\n        showHideTable(false) \r\n    })\r\n\r\n    const DisableSaveButton = ((objs) => {\r\n      if(objs.length <= 0)\r\n        setButtonDisable(true) \r\n    })\r\n  \r\n    return (\r\n      <div className=\"container\">\r\n        <h3 className=\"title\">Calculation Result Table</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Item#</th>\r\n              <th>Width</th>\r\n              <th>Length</th>\r\n              <th>Hings</th>\r\n              <th>Panel</th>\r\n              <th>Outside Frame</th>\r\n              <th>Inside Frame</th>\r\n              <th>Frame</th>\r\n              <th>Up</th>\r\n              <th>Down</th>\r\n              <th>Delete</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {options.map((option, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  <label>{index+1}</label>\r\n                </td>\r\n                <td>\r\n                    <label>{option.width}</label>\r\n                </td>\r\n                <td>\r\n                  <label>{option.length}</label>\r\n                </td>\r\n                <td>\r\n                  <label>{option.hingsChoice}</label>\r\n                </td>\r\n                <td>\r\n                  <label>{option.panel}</label>\r\n                </td>\r\n                <td>\r\n                  <label>{option.outsideFrame}</label>\r\n                </td>\r\n                <td>\r\n                  <label>{option.insideFrame}</label>\r\n                </td>\r\n                <td>\r\n                  <label>{option.numOfFrame} </label>\r\n                </td>\r\n                <td>\r\n                  <label className=\"material-symbols-outlined\" id=\"up\" onClick={(e) => onChange(e, index)}>arrow_circle_up</label>\r\n                </td>\r\n                <td>\r\n                  <span className=\"material-symbols-outlined\" id=\"down\" onClick={(e) => onChange(e, index)}>arrow_circle_down</span>\r\n                </td>\r\n                <td>\r\n                  <span className=\"material-symbols-outlined\" id=\"delete\" onClick={(e) => onChange(e, index)}>delete</span>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default TableDetailMain","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\DeleteItemStateObject.js",["182","183","184","185"],[],"export function deleteItemStateObject(id, objs, stateObject, ShowHideTable, DisableSaveButton){\r\n    stateObject(objs => {\r\n        if(objs.length == 1 && id == 0){\r\n            objs = []\r\n            ShowHideTable(objs)\r\n            DisableSaveButton(objs)\r\n            return objs;\r\n        }\r\n        return objs.filter(o => o.id !== id)\r\n    })\r\n}\r\n\r\nexport function deleteOrderStateObject(id, objs, stateObject){\r\n    stateObject(objs => {\r\n        if(objs.length == 1 && id == 0){\r\n            objs = []\r\n            return objs;\r\n        }\r\n        return objs.filter(o => o.id !== id)\r\n    })\r\n}","C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\SwapArrayUp.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\Components\\TextError.js",[],[],"C:\\Users\\tommy\\source\\repos\\Shutters-Fabric\\src\\utilities\\SwapArrayDown.js",[],[],{"ruleId":"186","severity":1,"message":"187","line":3,"column":10,"nodeType":"188","messageId":"189","endLine":3,"endColumn":16},{"ruleId":"186","severity":1,"message":"190","line":6,"column":8,"nodeType":"188","messageId":"189","endLine":6,"endColumn":13},{"ruleId":"186","severity":1,"message":"191","line":17,"column":7,"nodeType":"188","messageId":"189","endLine":17,"endColumn":22},{"ruleId":"186","severity":1,"message":"192","line":51,"column":11,"nodeType":"188","messageId":"189","endLine":51,"endColumn":28},{"ruleId":"186","severity":1,"message":"193","line":52,"column":11,"nodeType":"188","messageId":"189","endLine":52,"endColumn":27},{"ruleId":"186","severity":1,"message":"194","line":59,"column":11,"nodeType":"188","messageId":"189","endLine":59,"endColumn":21},{"ruleId":"195","severity":1,"message":"196","line":76,"column":33,"nodeType":"197","messageId":"198","endLine":76,"endColumn":127,"fix":"199"},{"ruleId":"195","severity":1,"message":"196","line":76,"column":33,"nodeType":"197","messageId":"198","endLine":76,"endColumn":107,"fix":"200"},{"ruleId":"195","severity":1,"message":"196","line":76,"column":33,"nodeType":"197","messageId":"198","endLine":76,"endColumn":87,"fix":"201"},{"ruleId":"202","severity":1,"message":"203","line":76,"column":68,"nodeType":"204","messageId":"205","endLine":76,"endColumn":69,"suggestions":"206"},{"ruleId":"186","severity":1,"message":"207","line":243,"column":11,"nodeType":"188","messageId":"189","endLine":243,"endColumn":24},{"ruleId":"186","severity":1,"message":"208","line":270,"column":22,"nodeType":"188","messageId":"189","endLine":270,"endColumn":28},{"ruleId":"209","severity":1,"message":"210","line":369,"column":41,"nodeType":"211","messageId":"212","endLine":369,"endColumn":43},{"ruleId":"213","severity":1,"message":"214","line":88,"column":13,"nodeType":"215","endLine":88,"endColumn":75},{"ruleId":"216","severity":1,"message":"217","line":49,"column":13,"nodeType":"218","messageId":"212","endLine":49,"endColumn":21},{"ruleId":"186","severity":1,"message":"219","line":2,"column":24,"nodeType":"188","messageId":"189","endLine":2,"endColumn":32},{"ruleId":"186","severity":1,"message":"220","line":2,"column":34,"nodeType":"188","messageId":"189","endLine":2,"endColumn":50},{"ruleId":"186","severity":1,"message":"221","line":5,"column":13,"nodeType":"188","messageId":"189","endLine":5,"endColumn":16},{"ruleId":"186","severity":1,"message":"222","line":15,"column":9,"nodeType":"188","messageId":"189","endLine":15,"endColumn":16},{"ruleId":"186","severity":1,"message":"208","line":33,"column":18,"nodeType":"188","messageId":"189","endLine":33,"endColumn":24},{"ruleId":"186","severity":1,"message":"187","line":3,"column":10,"nodeType":"188","messageId":"189","endLine":3,"endColumn":16},{"ruleId":"186","severity":1,"message":"223","line":3,"column":18,"nodeType":"188","messageId":"189","endLine":3,"endColumn":22},{"ruleId":"186","severity":1,"message":"224","line":4,"column":8,"nodeType":"188","messageId":"189","endLine":4,"endColumn":17},{"ruleId":"186","severity":1,"message":"225","line":17,"column":11,"nodeType":"188","messageId":"189","endLine":17,"endColumn":12},{"ruleId":"186","severity":1,"message":"226","line":35,"column":9,"nodeType":"188","messageId":"189","endLine":35,"endColumn":21},{"ruleId":"186","severity":1,"message":"208","line":36,"column":22,"nodeType":"188","messageId":"189","endLine":36,"endColumn":28},{"ruleId":"186","severity":1,"message":"187","line":3,"column":10,"nodeType":"188","messageId":"189","endLine":3,"endColumn":16},{"ruleId":"186","severity":1,"message":"227","line":15,"column":5,"nodeType":"188","messageId":"189","endLine":15,"endColumn":13},{"ruleId":"186","severity":1,"message":"228","line":8,"column":7,"nodeType":"188","messageId":"189","endLine":8,"endColumn":25},{"ruleId":"186","severity":1,"message":"229","line":3,"column":20,"nodeType":"188","messageId":"189","endLine":3,"endColumn":25},{"ruleId":"186","severity":1,"message":"230","line":3,"column":27,"nodeType":"188","messageId":"189","endLine":3,"endColumn":39},{"ruleId":"186","severity":1,"message":"231","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"232","line":1,"column":28,"nodeType":"188","messageId":"189","endLine":1,"endColumn":34},{"ruleId":"186","severity":1,"message":"233","line":1,"column":36,"nodeType":"188","messageId":"189","endLine":1,"endColumn":44},{"ruleId":"209","severity":1,"message":"210","line":3,"column":24,"nodeType":"211","messageId":"212","endLine":3,"endColumn":26},{"ruleId":"209","severity":1,"message":"210","line":3,"column":35,"nodeType":"211","messageId":"212","endLine":3,"endColumn":37},{"ruleId":"209","severity":1,"message":"210","line":15,"column":24,"nodeType":"211","messageId":"212","endLine":15,"endColumn":26},{"ruleId":"209","severity":1,"message":"210","line":15,"column":35,"nodeType":"211","messageId":"212","endLine":15,"endColumn":37},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Table' is defined but never used.","'fieldNumberOnly' is assigned a value but never used.","'customerFirstName' is assigned a value but never used.","'customerLastName' is assigned a value but never used.","'newInvoice' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property replace.","MemberExpression","unexpectedWhitespace",{"range":"234","text":"235"},{"range":"236","text":"235"},{"range":"237","text":"235"},"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["238","239"],"'showHideError' is assigned a value but never used.","'errors' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-dupe-keys","Duplicate key 'password'.","ObjectExpression","'useField' is defined but never used.","'useFormikContext' is defined but never used.","'Yup' is defined but never used.","'custInv' is assigned a value but never used.","'Form' is defined but never used.","'TextError' is defined but never used.","'x' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'register' is assigned a value but never used.","'StyledErrorMessage' is assigned a value but never used.","'Field' is defined but never used.","'ErrorMessage' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.",[3612,3614],".",[3592,3594],[3572,3574],{"messageId":"240","fix":"241","desc":"242"},{"messageId":"243","fix":"244","desc":"245"},"removeEscape",{"range":"246","text":"247"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"248","text":"249"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[3562,3563],"",[3562,3562],"\\"]